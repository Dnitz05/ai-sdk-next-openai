/**
 * SmartDocumentProcessor - Processador intel¬∑ligent de documents
 * 
 * Aquesta classe implementa la nova arquitectura revolucion√†ria per generar
 * m√∫ltiples informes en una sola passada amb coher√®ncia narrativa garantida.
 * 
 * Data: 6 de juliol de 2025
 * Arquitecte: Cline
 * Objectiu: 20x m√©s r√†pid, 95% m√©s fiable, 85% m√©s simple
 */

import PizZip from 'pizzip';
import Docxtemplater from 'docxtemplater';
import supabaseServerClient from '@/lib/supabase/server';
import {
  BatchProcessingConfig,
  BatchProcessingResult,
  ProcessedDocument,
  MistralResponse,
  SmartPlaceholder,
  SMART_GENERATION_CONSTANTS,
  PerformanceMetrics,
} from './types';

export class SmartDocumentProcessor {
  private supabase;
  private mistralApiKey: string;
  private performanceMetrics: PerformanceMetrics;

  constructor() {
    this.supabase = supabaseServerClient;
    this.mistralApiKey = process.env.MISTRAL_API_KEY || '';
    this.performanceMetrics = {
      totalProcessingTime: 0,
      aiCallTime: 0,
      docxGenerationTime: 0,
      storageUploadTime: 0,
      documentsPerSecond: 0,
    };
  }

  // ============================================================================
  // M√àTODE PRINCIPAL - PROCESSAMENT INDIVIDUAL (NOU)
  // ============================================================================

  /**
   * Processa un √∫nic document de manera ultra-optimitzada
   * Aquest m√®tode est√† espec√≠ficament dissenyat per a generacions individuals
   * i seq√ºencials, evitant la sobrec√†rrega del processament batch
   */
  async processSingle(
    templateContent: string,
    templateStoragePath: string,
    rowData: any,
    templateId: string,
    userId: string
  ): Promise<BatchProcessingResult> {
    const startTime = Date.now();
    
    try {
      console.log(`üöÄ [SmartProcessor-Single] Iniciant processament individual optimitzat`);

      // 1. Extreure placeholders del template
      const placeholders = this.extractPlaceholders(templateContent);
      console.log(`üìù [SmartProcessor-Single] Placeholders trobats:`, placeholders.map(p => p.id));

      // 2. Construir prompt optimitzat per a un sol document
      const optimizedPrompt = this.buildSingleDocumentPrompt(
        templateContent,
        rowData,
        placeholders
      );

      // 3. Crida eficient a Mistral AI amb timeout
      const aiResponse = await this.callMistralAISingle(optimizedPrompt);
      
      if (!aiResponse.success) {
        throw new Error(`Error en crida Mistral AI: ${aiResponse.errorMessage}`);
      }

      // 4. Generar document DOCX individual
      const document = await this.generateSingleDocx(
        aiResponse.documentsData[0], // Utilitzar el primer (i √∫nic) document
        templateStoragePath,
        rowData
      );

      // 5. Calcular m√®triques de rendiment
      const processingTime = Date.now() - startTime;
      this.performanceMetrics.totalProcessingTime = processingTime;
      this.performanceMetrics.documentsPerSecond = 1 / (processingTime / 1000);

      console.log(`‚úÖ [SmartProcessor-Single] Document generat en ${processingTime}ms`);

      return {
        success: true,
        generationId: `single_${Date.now()}`,
        documentsGenerated: 1,
        processingTimeMs: processingTime,
        documents: [document],
      };

    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Error desconegut';
      console.error(`‚ùå [SmartProcessor-Single] Error: ${errorMessage}`, error);
      
      return {
        success: false,
        generationId: '',
        documentsGenerated: 0,
        processingTimeMs: Date.now() - startTime,
        documents: [],
        errorMessage,
      };
    }
  }

  // ============================================================================
  // M√àTODE PRINCIPAL - PROCESSAMENT BATCH (EXISTENT)
  // ============================================================================

  /**
   * Processa m√∫ltiples informes en una sola crida IA
   * Aquest √©s el m√®tode revolucionari que substitueix tot el sistema antic
   */
  async processBatch(config: BatchProcessingConfig): Promise<BatchProcessingResult> {
    const startTime = Date.now();
    
    try {
      console.log(`üöÄ [SmartProcessor] Iniciant processament batch:`, {
        templateId: config.templateId,
        documentsToGenerate: config.excelData.length,
        userId: config.userId,
      });

      // 1. Crear registre inicial a la base de dades
      const generationId = await this.createGenerationRecord(config);
      
      // 2. Extreure placeholders del template
      const placeholders = this.extractPlaceholders(config.templateContent);
      console.log(`üìù [SmartProcessor] Placeholders trobats:`, placeholders.map(p => p.id));

      // 3. Construir prompt global intel¬∑ligent
      const globalPrompt = this.buildGlobalPrompt(
        config.templateContent,
        config.excelData,
        placeholders
      );

      // 4. Crida √∫nica a Mistral AI (la m√†gia!)
      const aiResponse = await this.callMistralAI(globalPrompt, config.excelData.length);
      
      if (!aiResponse.success) {
        throw new Error(`Error en crida Mistral AI: ${aiResponse.errorMessage}`);
      }

      // 5. Generar documents DOCX amb format preservat
      const documents = await this.generateDocxFiles(
        aiResponse.documentsData,
        config.templateStoragePath,
        config.excelData,
        generationId
      );

      // 6. Actualitzar registre amb resultats
      const processingTime = Date.now() - startTime;
      await this.updateGenerationRecord(generationId, {
        status: 'completed',
        generated_documents: documents,
        processing_time: processingTime,
        completed_at: new Date().toISOString(),
      });

      // 7. Calcular m√®triques de rendiment
      this.performanceMetrics.totalProcessingTime = processingTime;
      this.performanceMetrics.documentsPerSecond = documents.length / (processingTime / 1000);

      console.log(`‚úÖ [SmartProcessor] Processament completat:`, {
        generationId,
        documentsGenerated: documents.length,
        processingTimeMs: processingTime,
        documentsPerSecond: this.performanceMetrics.documentsPerSecond.toFixed(2),
      });

      return {
        success: true,
        generationId,
        documentsGenerated: documents.length,
        processingTimeMs: processingTime,
        documents,
      };

    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Error desconegut';
      console.error(`‚ùå [SmartProcessor] Error cr√≠tic en processament batch: ${errorMessage}`, error);
      
      // Actualitzar registre amb error si existeix generationId
      
      return {
        success: false,
        generationId: '',
        documentsGenerated: 0,
        processingTimeMs: Date.now() - startTime,
        documents: [],
        errorMessage,
      };
    }
  }

  // ============================================================================
  // EXTRACCI√ì DE PLACEHOLDERS
  // ============================================================================

  /**
   * Extreu placeholders intel¬∑ligents del template
   * Format: {ID: instrucci√≥ completa}
   */
  private extractPlaceholders(templateContent: string): SmartPlaceholder[] {
    const placeholders: SmartPlaceholder[] = [];
    
    // Regex per trobar placeholders format {ID: instrucci√≥}
    const placeholderRegex = /\{([A-Z_]+):\s*([^}]+)\}/g;
    let match;

    while ((match = placeholderRegex.exec(templateContent)) !== null) {
      const [, id, instruction] = match;
      
      placeholders.push({
        id: id.trim(),
        instruction: instruction.trim(),
      });
    }

    // Eliminar duplicats
    const uniquePlaceholders = placeholders.filter((placeholder, index, self) =>
      index === self.findIndex(p => p.id === placeholder.id)
    );

    return uniquePlaceholders;
  }

  // ============================================================================
  // CONSTRUCCI√ì DEL PROMPT INDIVIDUAL (NOU)
  // ============================================================================

  /**
   * Construeix un prompt ultra-optimitzat per a un √∫nic document
   * Aquest prompt √©s molt m√©s eficient que buildGlobalPrompt per a un sol document
   */
  private buildSingleDocumentPrompt(
    templateContent: string,
    rowData: any,
    placeholders: SmartPlaceholder[]
  ): string {
    return `
TASCA: Genera contingut per UN √öNIC document professional

PLANTILLA:
${templateContent}

PLACEHOLDERS A SUBSTITUIR (${placeholders.length}):
${placeholders.map(p => `- {${p.id}}: ${p.instruction}`).join('\n')}

DADES D'AQUEST DOCUMENT:
${JSON.stringify(rowData, null, 2)}

INSTRUCCIONS:
1. Substitueix TOTS els placeholders amb contingut adequat basat en les dades
2. Mant√©n coher√®ncia gramatical i concordan√ßa de g√®nere/nombre
3. Formata n√∫meros, dates i imports segons est√†ndards catalans
4. Utilitza un to professional i formal

FORMAT DE SORTIDA:
Retorna NOM√âS un objecte JSON amb els placeholders com a claus i el contingut generat com a valors.

EXEMPLE:
{
  "CONTRACTISTA": "La contractista Maria Soler i Associats, S.L.",
  "OBRA": "la reforma integral de les oficines centrals",
  "IMPORT": "12.345,67 ‚Ç¨"
}

RESPOSTA (nom√©s l'objecte JSON):
`;
  }

  // ============================================================================
  // CONSTRUCCI√ì DEL PROMPT GLOBAL (EXISTENT)
  // ============================================================================

  /**
   * Construeix el prompt global intel¬∑ligent per Mistral AI
   * Aquest prompt √©s la clau de la coher√®ncia narrativa
   */
  private buildGlobalPrompt(
    templateContent: string,
    excelData: any[],
    placeholders: SmartPlaceholder[]
  ): string {
    return `
TASCA CR√çTICA: Processament Intel¬∑ligent de Documents amb Coher√®ncia Narrativa

Ets un expert en generaci√≥ de documents professionals amb coher√®ncia ling√º√≠stica perfecta.
Processa aquest document substituint TOTS els placeholders mantenint coher√®ncia narrativa absoluta.

DOCUMENT PLANTILLA:
${templateContent}

PLACEHOLDERS IDENTIFICATS (${placeholders.length}):
${placeholders.map(p => `- {${p.id}}: ${p.instruction}`).join('\n')}

DADES EXCEL (${excelData.length} files a processar):
${JSON.stringify(excelData, null, 2)}

INSTRUCCIONS ESPEC√çFIQUES:
1. Per cada fila de dades Excel, genera un document complet
2. Substitueix TOTS els placeholders {ID: instrucci√≥} segons les seves instruccions espec√≠fiques
3. Mant√©n coher√®ncia narrativa i gramatical en cada document individual
4. Assegura concordan√ßa de g√®nere i nombre al llarg de tot el text
5. Utilitza el context global per decisions intel¬∑ligents (ex: si un contractista √©s dona, usa "La contractista")
6. Formata n√∫meros, dates i imports segons est√†ndards catalans/espanyols
7. Mant√©n el to professional i formal apropiat per documents oficials

FORMAT DE SORTIDA OBLIGATORI:
Retorna un array JSON amb ${excelData.length} objectes, un per cada document.
Cada objecte ha de tenir com a claus els IDs dels placeholders i com a valors el text final.

EXEMPLE DE FORMAT:
[
  {
    "CONTRACTISTA": "La contractista Maria Soler i Associats, S.L.",
    "OBRA": "la reforma integral de les oficines centrals",
    "IMPORT": "12.345,67 ‚Ç¨"
  },
  {
    "CONTRACTISTA": "El contractista Joan P√©rez",
    "OBRA": "la construcci√≥ del nou magatzem industrial",
    "IMPORT": "25.000,00 ‚Ç¨"
  }
]

DOCUMENTS PROCESSATS (retorna nom√©s l'array JSON):
`;
  }

  // ============================================================================
  // CRIDA A MISTRAL AI INDIVIDUAL (NOU)
  // ============================================================================

  /**
   * Crida optimitzada a Mistral AI per a un sol document amb timeout agressiu
   * Aquesta crida est√† espec√≠ficament dissenyada per a velocitat m√†xima
   */
  private async callMistralAISingle(prompt: string): Promise<MistralResponse> {
    const aiStartTime = Date.now();
    const TIMEOUT_MS = 90000; // 90 segons timeout per a un sol document
    
    try {
      console.log(`ü§ñ [MistralAI-Single] Iniciant crida optimitzada...`);

      // Crear AbortController per timeout controlat
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), TIMEOUT_MS);

      const response = await fetch('https://api.mistral.ai/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.mistralApiKey}`,
        },
        signal: controller.signal,
        body: JSON.stringify({
          model: 'mistral-small-latest', // Model m√©s r√†pid per documents individuals
          messages: [
            {
              role: 'user',
              content: prompt,
            },
          ],
          temperature: 0.3, // Menys creativitat = m√©s rapidesa
          max_tokens: 2000, // L√≠mit m√©s restrictiu per a un sol document
        }),
      });

      clearTimeout(timeoutId);

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();
      const aiContent = data.choices[0]?.message?.content;

      if (!aiContent) {
        throw new Error('Resposta buida de Mistral AI');
      }

      // Parsejar la resposta JSON
      const documentData = this.parseAISingleResponse(aiContent);
      
      this.performanceMetrics.aiCallTime = Date.now() - aiStartTime;
      
      console.log(`‚úÖ [MistralAI-Single] Crida completada:`, {
        aiCallTimeMs: this.performanceMetrics.aiCallTime,
        tokensUsed: data.usage?.total_tokens || 'N/A',
      });

      return {
        success: true,
        documentsData: [documentData], // Empaquetar en array per compatibilitat
        tokensUsed: data.usage?.total_tokens,
      };

    } catch (error) {
      this.performanceMetrics.aiCallTime = Date.now() - aiStartTime;
      
      if (error instanceof Error && error.name === 'AbortError') {
        console.error(`‚ùå [MistralAI-Single] Timeout despr√©s de ${TIMEOUT_MS}ms`);
        return {
          success: false,
          documentsData: [],
          errorMessage: `Timeout de la IA despr√©s de ${TIMEOUT_MS/1000} segons`,
        };
      }
      
      console.error(`‚ùå [MistralAI-Single] Error en crida:`, error);
      
      return {
        success: false,
        documentsData: [],
        errorMessage: error instanceof Error ? error.message : 'Error desconegut en Mistral AI',
      };
    }
  }

  /**
   * Parseja la resposta de Mistral AI per a un sol document
   */
  private parseAISingleResponse(aiContent: string): Record<string, string> {
    try {
      // Intentar extreure JSON de la resposta
      const jsonMatch = aiContent.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        throw new Error('No s\'ha trobat objecte JSON en la resposta');
      }

      const documentData = JSON.parse(jsonMatch[0]);

      if (typeof documentData !== 'object' || documentData === null) {
        throw new Error('La resposta no √©s un objecte v√†lid');
      }

      return documentData;

    } catch (error) {
      console.error(`‚ùå [Parser-Single] Error parseant resposta AI:`, error);
      console.error(`Contingut rebut:`, aiContent.substring(0, 500) + '...');
      throw new Error(`Error parseant resposta de Mistral AI: ${error instanceof Error ? error.message : 'Error desconegut'}`);
    }
  }

  // ============================================================================
  // CRIDA A MISTRAL AI BATCH (EXISTENT)
  // ============================================================================

  /**
   * Realitza la crida √∫nica a Mistral AI
   * Aquesta √©s la crida que substitueix 10+ crides del sistema antic
   */
  private async callMistralAI(prompt: string, expectedDocuments: number): Promise<MistralResponse> {
    const aiStartTime = Date.now();
    
    try {
      console.log(`ü§ñ [MistralAI] Iniciant crida √∫nica per ${expectedDocuments} documents...`);

      const response = await fetch('https://api.mistral.ai/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.mistralApiKey}`,
        },
        body: JSON.stringify({
          model: SMART_GENERATION_CONSTANTS.MISTRAL_DEFAULTS.MODEL,
          messages: [
            {
              role: 'user',
              content: prompt,
            },
          ],
          temperature: SMART_GENERATION_CONSTANTS.MISTRAL_DEFAULTS.TEMPERATURE,
          max_tokens: SMART_GENERATION_CONSTANTS.MISTRAL_DEFAULTS.MAX_TOKENS,
        }),
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();
      const aiContent = data.choices[0]?.message?.content;

      if (!aiContent) {
        throw new Error('Resposta buida de Mistral AI');
      }

      // Parsejar la resposta JSON
      const documentsData = this.parseAIResponse(aiContent, expectedDocuments);
      
      this.performanceMetrics.aiCallTime = Date.now() - aiStartTime;
      
      console.log(`‚úÖ [MistralAI] Crida completada:`, {
        documentsProcessed: documentsData.length,
        aiCallTimeMs: this.performanceMetrics.aiCallTime,
        tokensUsed: data.usage?.total_tokens || 'N/A',
      });

      return {
        success: true,
        documentsData,
        tokensUsed: data.usage?.total_tokens,
      };

    } catch (error) {
      this.performanceMetrics.aiCallTime = Date.now() - aiStartTime;
      console.error(`‚ùå [MistralAI] Error en crida:`, error);
      
      return {
        success: false,
        documentsData: [],
        errorMessage: error instanceof Error ? error.message : 'Error desconegut en Mistral AI',
      };
    }
  }

  /**
   * Parseja la resposta de Mistral AI i valida el format
   */
  private parseAIResponse(aiContent: string, expectedDocuments: number): Record<string, string>[] {
    try {
      // Intentar extreure JSON de la resposta
      const jsonMatch = aiContent.match(/\[[\s\S]*\]/);
      if (!jsonMatch) {
        throw new Error('No s\'ha trobat array JSON en la resposta');
      }

      const documentsData = JSON.parse(jsonMatch[0]);

      if (!Array.isArray(documentsData)) {
        throw new Error('La resposta no √©s un array');
      }

      if (documentsData.length !== expectedDocuments) {
        console.warn(`‚ö†Ô∏è [Parser] Documents esperats: ${expectedDocuments}, rebuts: ${documentsData.length}`);
      }

      // Validar que cada document t√© les claus necess√†ries
      documentsData.forEach((doc, index) => {
        if (typeof doc !== 'object' || doc === null) {
          throw new Error(`Document ${index} no √©s un objecte v√†lid`);
        }
      });

      return documentsData;

    } catch (error) {
      console.error(`‚ùå [Parser] Error parseant resposta AI:`, error);
      console.error(`Contingut rebut:`, aiContent.substring(0, 500) + '...');
      throw new Error(`Error parseant resposta de Mistral AI: ${error instanceof Error ? error.message : 'Error desconegut'}`);
    }
  }

  // ============================================================================
  // GENERACI√ì DE DOCUMENT DOCX INDIVIDUAL (NOU)
  // ============================================================================

  /**
   * Genera un √∫nic document DOCX de manera optimitzada
   * Aquest m√®tode est√† espec√≠ficament dissenyat per a generacions individuals
   */
  private async generateSingleDocx(
    documentData: Record<string, string>,
    templateStoragePath: string,
    rowData: any
  ): Promise<ProcessedDocument> {
    const docxStartTime = Date.now();
    
    try {
      console.log(`üìÑ [DocxGenerator-Single] Generant document DOCX individual...`);

      // Descarregar plantilla original
      const templateBuffer = await this.downloadTemplateFromStorage(templateStoragePath);
      
      // Crear inst√†ncia de docxtemplater
      const zip = new PizZip(templateBuffer);
      const doc = new Docxtemplater(zip, {
        paragraphLoop: SMART_GENERATION_CONSTANTS.DOCX_DEFAULTS.PARAGRAPH_LOOP,
        linebreaks: SMART_GENERATION_CONSTANTS.DOCX_DEFAULTS.LINEBREAKS,
        nullGetter: SMART_GENERATION_CONSTANTS.DOCX_DEFAULTS.NULL_GETTER,
      });

      // SUBSTITUCI√ì QUIR√öRGICA: nom√©s canvia el text dins de les etiquetes XML
      doc.setData(documentData);
      doc.render();

      // Generar buffer del document final
      const documentBuffer = doc.getZip().generate({ type: 'nodebuffer' });

      // Per a generacions individuals, no pugem a storage per defecte
      // (es pot afegir en el futur si es necessita)
      
      this.performanceMetrics.docxGenerationTime = Date.now() - docxStartTime;
      
      console.log(`‚úÖ [DocxGenerator-Single] Document generat:`, {
        docxGenerationTimeMs: this.performanceMetrics.docxGenerationTime,
      });

      return {
        documentIndex: 0,
        rowData: rowData,
        placeholderValues: documentData,
        documentBuffer,
        storagePath: '', // No storage per defecte en mode individual
      } as ProcessedDocument;

    } catch (error) {
      console.error(`‚ùå [DocxGenerator-Single] Error generant document:`, error);
      throw error;
    }
  }

  // ============================================================================
  // GENERACI√ì DE DOCUMENTS DOCX BATCH (EXISTENT)
  // ============================================================================

  /**
   * Genera documents DOCX finals amb format preservat
   * Utilitza docxtemplater per substituci√≥ quir√∫rgica
   */
  private async generateDocxFiles(
    documentsData: Record<string, string>[],
    templateStoragePath: string,
    excelData: any[],
    generationId: string
  ): Promise<ProcessedDocument[]> {
    const docxStartTime = Date.now();
    
    try {
      console.log(`üìÑ [DocxGenerator] Generant ${documentsData.length} documents DOCX...`);

      // Descarregar plantilla original UNA SOLA VEGADA
      const templateBuffer = await this.downloadTemplateFromStorage(templateStoragePath);
      
      const processedDocuments: ProcessedDocument[] = [];

      // Processar cada document en paral¬∑lel (optimitzaci√≥)
      const documentPromises = documentsData.map(async (docData, index) => {
        try {
          // Crear nova inst√†ncia de docxtemplater per cada document
          const zip = new PizZip(templateBuffer);
          const doc = new Docxtemplater(zip, {
            paragraphLoop: SMART_GENERATION_CONSTANTS.DOCX_DEFAULTS.PARAGRAPH_LOOP,
            linebreaks: SMART_GENERATION_CONSTANTS.DOCX_DEFAULTS.LINEBREAKS,
            nullGetter: SMART_GENERATION_CONSTANTS.DOCX_DEFAULTS.NULL_GETTER,
          });

          // SUBSTITUCI√ì QUIR√öRGICA: nom√©s canvia el text dins de les etiquetes XML
          doc.setData(docData);
          doc.render();

          // Generar buffer del document final
          const documentBuffer = doc.getZip().generate({ type: 'nodebuffer' });

          // Pujar document a Storage
          const storagePath = await this.uploadDocumentToStorage(
            documentBuffer,
            generationId,
            index
          );

          return {
            documentIndex: index,
            rowData: excelData[index] || {},
            placeholderValues: docData,
            documentBuffer,
            storagePath,
          } as ProcessedDocument;

        } catch (error) {
          console.error(`‚ùå [DocxGenerator] Error generant document ${index}:`, error);
          throw error;
        }
      });

      // Esperar que tots els documents es processin
      const results = await Promise.all(documentPromises);
      processedDocuments.push(...results);

      this.performanceMetrics.docxGenerationTime = Date.now() - docxStartTime;
      
      console.log(`‚úÖ [DocxGenerator] Documents generats:`, {
        totalDocuments: processedDocuments.length,
        docxGenerationTimeMs: this.performanceMetrics.docxGenerationTime,
      });

      return processedDocuments;

    } catch (error) {
      console.error(`‚ùå [DocxGenerator] Error en generaci√≥ DOCX:`, error);
      throw error;
    }
  }

  // ============================================================================
  // GESTI√ì DE STORAGE
  // ============================================================================

  /**
   * Descarrega la plantilla original de Supabase Storage
   */
  private async downloadTemplateFromStorage(templatePath: string): Promise<Buffer> {
    try {
      const { data, error } = await this.supabase.storage
        .from('template-docx')
        .download(templatePath);

      if (error) {
        throw new Error(`Error descarregant plantilla: ${error.message}`);
      }

      return Buffer.from(await data.arrayBuffer());

    } catch (error) {
      console.error(`‚ùå [Storage] Error descarregant plantilla:`, error);
      throw error;
    }
  }

  /**
   * Puja document generat a Supabase Storage
   */
  private async uploadDocumentToStorage(
    documentBuffer: Buffer,
    generationId: string,
    documentIndex: number
  ): Promise<string> {
    const uploadStartTime = Date.now();
    
    try {
      const fileName = `document_${documentIndex + 1}.docx`;
      const storagePath = `${SMART_GENERATION_CONSTANTS.STORAGE.BASE_PATH}/${generationId}/${fileName}`;

      const { error } = await this.supabase.storage
        .from(SMART_GENERATION_CONSTANTS.STORAGE.BUCKET)
        .upload(storagePath, documentBuffer, {
          contentType: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
          upsert: true,
        });

      if (error) {
        throw new Error(`Error pujant document: ${error.message}`);
      }

      this.performanceMetrics.storageUploadTime += Date.now() - uploadStartTime;
      
      return storagePath;

    } catch (error) {
      console.error(`‚ùå [Storage] Error pujant document ${documentIndex}:`, error);
      throw error;
    }
  }

  // ============================================================================
  // GESTI√ì DE BASE DE DADES
  // ============================================================================

  /**
   * Crea registre inicial a smart_generations
   */
  private async createGenerationRecord(config: BatchProcessingConfig): Promise<string> {
    try {
      const { data, error } = await this.supabase
        .from('smart_generations')
        .insert({
          user_id: config.userId,
          template_id: config.templateId,
          template_content: config.templateContent,
          excel_data: config.excelData,
          num_documents: config.excelData.length,
          status: 'processing',
        })
        .select('id')
        .single();

      if (error) {
        throw new Error(`Error creant registre: ${error.message}`);
      }

      return data.id;

    } catch (error) {
      console.error(`‚ùå [Database] Error creant registre:`, error);
      throw error;
    }
  }

  /**
   * Actualitza registre amb resultats
   */
  private async updateGenerationRecord(
    generationId: string,
    updates: Partial<{
      status: string;
      generated_documents: ProcessedDocument[];
      processing_time: number;
      completed_at: string;
      error_message: string;
    }>
  ): Promise<void> {
    try {
      const { error } = await this.supabase
        .from('smart_generations')
        .update(updates)
        .eq('id', generationId);

      if (error) {
        throw new Error(`Error actualitzant registre: ${error.message}`);
      }

    } catch (error) {
      console.error(`‚ùå [Database] Error actualitzant registre:`, error);
      throw error;
    }
  }

  // ============================================================================
  // UTILITATS P√öBLIQUES
  // ============================================================================

  /**
   * Obt√© m√®triques de rendiment de l'√∫ltima operaci√≥
   */
  public getPerformanceMetrics(): PerformanceMetrics {
    return { ...this.performanceMetrics };
  }

  /**
   * Valida configuraci√≥ abans del processament
   */
  public validateConfig(config: BatchProcessingConfig): { valid: boolean; errors: string[] } {
    const errors: string[] = [];

    if (!config.templateId) errors.push('Template ID √©s obligatori');
    if (!config.templateContent) errors.push('Template content √©s obligatori');
    if (!config.templateStoragePath) errors.push('Template storage path √©s obligatori');
    if (!config.userId) errors.push('User ID √©s obligatori');
    if (!Array.isArray(config.excelData) || config.excelData.length === 0) {
      errors.push('Excel data ha de ser un array no buit');
    }
    if (config.excelData.length > SMART_GENERATION_CONSTANTS.LIMITS.MAX_DOCUMENTS_PER_BATCH) {
      errors.push(`M√†xim ${SMART_GENERATION_CONSTANTS.LIMITS.MAX_DOCUMENTS_PER_BATCH} documents per batch`);
    }

    return {
      valid: errors.length === 0,
      errors,
    };
  }
}
